<?php

/*
 * This file is part of the infocurro package.
 *
 * (c) Aula de Software Libre <aulasoftwarelibre@uco.es>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * Created by PhpStorm.
 * User: sergio
 * Date: 6/02/18
 * Time: 20:36.
 */

namespace App\Menu;

use Knp\Menu\ItemInterface;
use Knp\Menu\Matcher\MatcherInterface;
use Knp\Menu\Renderer\ListRenderer;

class MenuRenderer extends ListRenderer
{
    public function __construct(MatcherInterface $matcher, array $defaultOptions = [], string $charset = null)
    {
        $defaultOptions = array_merge([
            'currentLinkClass' => false,
        ], $defaultOptions);

        parent::__construct($matcher, $defaultOptions, $charset);
    }

    protected function renderLink(ItemInterface $item, array $options = [])
    {
        if ($item->getUri() && (!$item->isCurrent() || $options['currentAsLink'])) {
            $text = $this->renderLinkElement($item, $options);
        } else {
            $text = $this->renderSpanElement($item, $options);
        }

        return $this->format($text, 'link', $item->getLevel(), $options);
    }

    protected function renderChildren(ItemInterface $item, array $options)
    {
        return parent::renderChildren($item, $options); // TODO: Change the autogenerated stub
    }

    protected function renderLinkElement(ItemInterface $item, array $options)
    {
        $attributes = [];
        if ($this->matcher->isCurrent($item)) {
            $attributes['class'] = $options['currentLinkClass'];
        }

        if ($this->matcher->isAncestor($item, $options['matchingDepth']) && $item->hasChildren()) {
            $attributes['class'] = $options['currentLinkClass'];
        }

        return sprintf(
            '<a %s href="%s"%s>%s%s%s</a>',
            $this->renderHtmlAttributes($attributes),
            $this->escape($item->getUri()),
            $this->renderHtmlAttributes($item->getLinkAttributes()),
            $this->renderLeftIconElement($item, $options),
            $this->renderLabel($item, $options),
            $this->renderRightIconElement($item, $options)
        );
    }

    protected function renderLeftIconElement(ItemInterface $item, array $options)
    {
        if (!$item->getExtra('left-icon')) {
            return '';
        }

        return sprintf('<i class="%s"></i> ', $item->getExtra('left-icon'));
    }

    protected function renderRightIconElement(ItemInterface $item, array $options)
    {
        if (!$item->getExtra('right-icon')) {
            return '';
        }

        return sprintf(' <i class="%s"></i>', $item->getExtra('right-icon'));
    }
}
